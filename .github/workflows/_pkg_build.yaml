# Generate a distribution package for PyPI.
# Publish the package on PyPI or TestPyPI.
# This reusable workflow uses the [pypi-publish](https://github.com/pypa/gh-action-pypi-publish) GitHub Action
# to publish the distribution package on either PyPI or TestPyPI, depending on the input.

name: '[Callable]: Package - Build'

on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ''
        required: false
        description: |
          Reference (i.e. branch, tag or SHA) of the current repository to checkout,
          i.e. the `ref` input of `actions/checkout`.
      repository:
        type: string
        default: ${{ github.repository }}
        required: false
        description: |
          Repository to checkout, i.e. the `repository` input of `actions/checkout`.
      metadata:
        type: string
        required: true
        description: |
          CI metadata as a JSON string.

jobs:

  build-sdist:
    name: 'Source Distribution'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: 'Build sdist'
        shell: bash
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist
      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: Distribution Package
      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*

  build-wheel:
    name: 'Pure Binary Distribution'
    if: fromJSON(inputs.metadata).package.pure_python == true
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/
      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: Distribution Package
      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*

  build-wheels:
    name: 'Native Binary Distribution: ${{ matrix.os }}'
    if: fromJSON(inputs.metadata).package.pure_python == false
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.metadata).package.cibw_matrix_platform }}
        py-ver: ${{ fromJson(inputs.metadata).package.cibw_matrix_python }}
    steps:
      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          ref: ${{ inputs.ref }}
      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.py-ver }}-${{ matrix.platform.cibw_platform }}
          CIBW_BUILD_VERBOSITY: 2
      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: Distribution Package
